import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter/material.dart';
import 'package:talentfolio/data/services/firebase_storage_service.dart';

import '../../data/services/firebase_firestore_service.dart';
import '../../models/project_model.dart';
import '../../models/user_model.dart';
import '../components/custom_widget.dart';

class AddNewProjectScreen extends StatefulWidget {
  const AddNewProjectScreen({super.key});

  @override
  State<AddNewProjectScreen> createState() => _AddNewProjectScreenState();
}

class _AddNewProjectScreenState extends State<AddNewProjectScreen> {

  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _githubLinkController = TextEditingController();
  final TextEditingController _tagController = TextEditingController();

  final List<String> _tags = [];
  File? _imageFile;
  final ImagePicker _picker = ImagePicker();
  bool _isLoading = false;

  Future<void> _pickImage() async {
    try {
      final XFile? pickedFile = await _picker.pickImage(source: ImageSource.gallery);
      if (pickedFile != null) {
        setState(() {
          _imageFile = File(pickedFile.path);
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to pick image')),
      );
    }
  }

  void _addTag() {
    if (_tagController.text.isNotEmpty) {
      setState(() {
        _tags.add(_tagController.text.trim());
        _tagController.clear();
      });
    }
  }

  void _removeTag(String tag) {
    setState(() {
      _tags.remove(tag);
    });
  }

  Future<void> _submitProject() async {
    if (_titleController.text.isEmpty || _descriptionController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Title and Description required')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });


    try{
       String? imageUrl;
       final user = FirebaseAuth.instance.currentUser;

       if(user == null){
         ScaffoldMessenger.of(context).showSnackBar(
           const SnackBar(content: Text('User not logged in')),
         );
         return;
       }

       // Fetch user details from Firestore
       UserModel? currentUser = await FirebaseFirestoreService().getUserById(user.uid);
       if (currentUser == null) {
         ScaffoldMessenger.of(context).showSnackBar(
           const SnackBar(content: Text('Error fetching user details')),
         );
         return;
       }

       // Upload image if selected
      if(_imageFile != null){
        imageUrl = await FirebaseStorageService().uploadProjectImage(_imageFile!, user.uid);
      }

       // Create a project model
       ProjectModel newProject = ProjectModel(
         id: "", // Auto-generated by Firebase
         title: _titleController.text.trim(),
         description: _descriptionController.text.trim(),
         tags: _tags,
         imageUrl: imageUrl ?? "",
         githubLink: _githubLinkController.text.trim(),
         userId: currentUser.id,
         userName: currentUser.name,
         createdAt: Timestamp.now(),
         likesCount: 0,
         commentsCount: 0,
       );

       await FirebaseFirestoreService().addProject(newProject);

       // Success Message
       ScaffoldMessenger.of(context).showSnackBar(
         const SnackBar(content: Text('Project added successfully!')),
       );
       Navigator.pop(context);

    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Error adding project')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _githubLinkController.dispose();
    _tagController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: UiHelper.customText(
          text: "Add New Project",
          color: Colors.black,
          fontWeight: FontWeight.bold,
          fontSize: 18,
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.black),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            /// Project Image
            GestureDetector(
              onTap: _pickImage,
              child: UiHelper.customCard(
                child: _imageFile != null
                    ? ClipRRect(
                  borderRadius: BorderRadius.circular(12),
                  child: Image.file(
                    _imageFile!,
                    width: double.infinity,
                    height: 200,
                    fit: BoxFit.cover,
                  ),
                )
                    : Container(
                  width: double.infinity,
                  height: 200,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.grey.shade300),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(
                        Icons.add_photo_alternate_outlined,
                        size: 50,
                        color: Colors.grey,
                      ),
                      const SizedBox(height: 8),
                      UiHelper.customText(
                        text: "Add Project Image",
                        color: Colors.grey.shade600,
                        fontWeight: FontWeight.w500,
                        fontSize: 16,
                      ),
                    ],
                  ),
                ),
              ),
            ),

            const SizedBox(height: 24),

            /// Title field
            UiHelper.customText(
              text: "Project Title",
              color: Colors.black,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            const SizedBox(height: 8),
            UiHelper.customTextField(
              controller: _titleController,
              hintText: "Enter project title",
              icon: Icons.title,
            ),

            const SizedBox(height: 16),

            /// Description field
            UiHelper.customText(
              text: "Description",
              color: Colors.black,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            const SizedBox(height: 8),
            _buildDescriptionField(),

            const SizedBox(height: 16),

            /// GitHub Link field
            UiHelper.customText(
              text: "GitHub Link",
              color: Colors.black,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            const SizedBox(height: 8),
            UiHelper.customTextField(
              controller: _githubLinkController,
              hintText: "https://github.com/username/repository",
              icon: Icons.link,
            ),

            const SizedBox(height: 16),

            /// Tags
            UiHelper.customText(
              text: "Tags",
              color: Colors.black,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            const SizedBox(height: 8),
            _buildTagsInput(),

            const SizedBox(height: 8),
            _buildTagsList(),

            const SizedBox(height: 32),

            /// Submit button
            Center(
              child: UiHelper.customButton(
                onTapped: _submitProject,
                text: "Add Project",
                width: double.infinity,
                height: 50,
                fontSize: 16,
              ),
            ),

            const SizedBox(height: 24),
          ],
        ),
      ),
    );
  }

  Widget _buildDescriptionField() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: Colors.grey),
      ),
      child: TextField(
        controller: _descriptionController,
        maxLines: 5,
        decoration: const InputDecoration(
          hintText: "Describe your project...",
          prefixIcon: Icon(Icons.description),
          border: InputBorder.none,
          contentPadding: EdgeInsets.symmetric(vertical: 12, horizontal: 8),
        ),
      ),
    );
  }

  Widget _buildTagsInput() {
    return Row(
      children: [
        Expanded(
          child: UiHelper.customTextField(
            controller: _tagController,
            hintText: "Add a tag",
            icon: Icons.tag,
          ),
        ),
        const SizedBox(width: 8),
        Container(
          height: 48,
          width: 48,
          decoration: BoxDecoration(
            color: Colors.green,
            borderRadius: BorderRadius.circular(10),
          ),
          child: IconButton(
            icon: const Icon(Icons.add, color: Colors.white),
            onPressed: _addTag,
          ),
        ),
      ],
    );
  }

  Widget _buildTagsList() {
    return Wrap(
      spacing: 8,
      runSpacing: 8,
      children: _tags.map((tag) {
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: Colors.green.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: Colors.green),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                tag,
                style: const TextStyle(
                  color: Colors.green,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(width: 4),
              GestureDetector(
                onTap: () => _removeTag(tag),
                child: const Icon(
                  Icons.close,
                  size: 16,
                  color: Colors.black,
                ),
              ),
            ],
          ),
        );
      }).toList(),
    );
  }
}
